#!/bin/bash

# Script de Teste de Integra√ß√£o - Stellar Ads SDK
# Este script testa a funcionalidade completa do sistema de hospedantes

echo "üöÄ Iniciando Teste de Integra√ß√£o - Stellar Ads SDK"
echo "=================================================="
echo "Vers√£o: 2.0.0"
echo "Data: $(date)"
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para logging
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se as portas est√£o dispon√≠veis
check_port() {
    local port=$1
    local service=$2
    
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null ; then
        log_success "$service rodando na porta $port"
        return 0
    else
        log_error "$service N√ÉO est√° rodando na porta $port"
        return 1
    fi
}

# Testar endpoint HTTP
test_endpoint() {
    local url=$1
    local description=$2
    
    log_info "Testando: $description"
    
    if curl -s -f "$url" > /dev/null; then
        log_success "$description - OK"
        return 0
    else
        log_error "$description - FALHOU"
        return 1
    fi
}

# Testar endpoint com resposta JSON
test_json_endpoint() {
    local url=$1
    local description=$2
    
    log_info "Testando: $description"
    
    response=$(curl -s "$url")
    if [ $? -eq 0 ] && echo "$response" | jq . > /dev/null 2>&1; then
        log_success "$description - OK"
        echo "   Resposta: $(echo "$response" | jq -c .)"
        return 0
    else
        log_error "$description - FALHOU"
        echo "   Resposta: $response"
        return 1
    fi
}

echo "1Ô∏è‚É£  VERIFICANDO SERVI√áOS"
echo "------------------------"

# Verificar se os backends est√£o rodando
backend_main=false
backend_ads=false

if check_port 3000 "Backend Principal (Frontend)"; then
    backend_main=true
fi

if check_port 3000 "Backend de An√∫ncios"; then
    backend_ads=true
fi

if check_port 5173 "Frontend (Vite Dev Server)"; then
    log_success "Frontend Vite rodando na porta 5173"
else
    log_warning "Frontend Vite n√£o detectado na porta 5173"
fi

echo ""
echo "2Ô∏è‚É£  TESTANDO ENDPOINTS DA API DE AN√öNCIOS"
echo "----------------------------------------"

if [ "$backend_ads" = true ]; then
    # Testar endpoints cr√≠ticos
    test_json_endpoint "http://localhost:3000/api/ad?siteId=test-site-001" "Buscar an√∫ncio"
    test_json_endpoint "http://localhost:3000/api/validate-site?siteId=test-site-001" "Validar site"
    test_endpoint "http://localhost:3000/api/sites" "Listar sites"
    
    # Testar endpoint de impress√£o (POST)
    log_info "Testando: Registrar impress√£o"
    impression_response=$(curl -s -X POST "http://localhost:3000/api/impression" \
        -H "Content-Type: application/json" \
        -d '{"campaignId":"test-campaign","siteId":"test-site-001"}')
    
    if [ $? -eq 0 ]; then
        log_success "Registrar impress√£o - OK"
        echo "   Resposta: $(echo "$impression_response" | jq -c .)"
    else
        log_error "Registrar impress√£o - FALHOU"
    fi
    
    # Testar endpoint de clique (GET)
    test_json_endpoint "http://localhost:3000/api/click?campaignId=test-campaign&siteId=test-site-001" "Registrar clique"
    
else
    log_warning "Backend de an√∫ncios n√£o est√° rodando - pulando testes de API"
    fi
    
else
    log_error "API de an√∫ncios (porta 3000) n√£o est√° acess√≠vel"
    log_info "Certifique-se de que o backend de an√∫ncios est√° rodando na porta 3000"
fi

# Verificar frontend (porta 5173)
if curl -s http://localhost:5173 > /dev/null 2>&1; then
    log_success "Frontend (porta 5173) est√° rodando"
else
    log_warning "Frontend (porta 5173) n√£o est√° acess√≠vel"
fi

# Testar SDK
log_info "Testando SDK..."

# Verificar se o arquivo SDK existe
if [ -f "public/sdk.js" ]; then
    log_success "Arquivo SDK encontrado"
    
    # Verificar se cont√©m as fun√ß√µes principais
    if grep -q "trackImpression" public/sdk.js && grep -q "trackClick" public/sdk.js; then
        log_success "SDK cont√©m fun√ß√µes de tracking"
    else
        log_error "SDK n√£o cont√©m fun√ß√µes de tracking necess√°rias"
    fi
    
    if grep -q "http://localhost:3000" public/sdk.js; then
        log_success "SDK configurado para porta 3000"
    else
        log_error "SDK n√£o est√° configurado para a porta correta"
    fi
    
else
    log_error "Arquivo SDK n√£o encontrado"
fi

# Testar p√°gina de demonstra√ß√£o
if [ -f "public/demo-sdk-advanced.html" ]; then
    log_success "P√°gina de demonstra√ß√£o avan√ßada criada"
else
    log_warning "P√°gina de demonstra√ß√£o avan√ßada n√£o encontrada"
fi

# Verificar configura√ß√£o das p√°ginas principais
log_info "Verificando p√°ginas principais..."

pages=("Sites.tsx" "SDKGenerator.tsx" "Dashboard.tsx")
for page in "${pages[@]}"; do
    if [ -f "src/pages/$page" ]; then
        log_success "P√°gina $page encontrada"
    else
        log_error "P√°gina $page n√£o encontrada"
    fi
done

# Verificar servi√ßos
if [ -f "src/services/api.ts" ]; then
    log_success "Servi√ßo de API encontrado"
    
    if grep -q "ADS_API_BASE_URL.*3000" src/services/api.ts; then
        log_success "API service configurado para porta 3000"
    else
        log_error "API service n√£o est√° configurado corretamente"
    fi
else
    log_error "Servi√ßo de API n√£o encontrado"
fi

echo ""
echo "üèÅ Teste completo!"
echo ""
echo "Para testar a integra√ß√£o completa:"
echo "1. Inicie o backend principal na porta 3000"
echo "2. Inicie a API de an√∫ncios na porta 3000"
echo "3. Inicie o frontend: npm run dev"
echo "4. Acesse: http://localhost:5173"
echo "5. Teste a p√°gina de demonstra√ß√£o: http://localhost:5173/demo-sdk-advanced.html"
echo ""
echo "Funcionalidades implementadas:"
echo "‚úÖ Gest√£o de sites para hospedantes"
echo "‚úÖ Gerador de c√≥digo SDK"
echo "‚úÖ SDK com tracking de impress√µes e cliques"
echo "‚úÖ Dashboard adaptativo (Anunciante/Hospedante)"
echo "‚úÖ Integra√ß√£o com nova API de an√∫ncios"
echo "‚úÖ Sistema de recompensas Stellar"
echo "‚úÖ Documenta√ß√£o e demonstra√ß√£o"
